// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"
	logger "user/internal/common/logger"

	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

// Debug provides a mock function with given fields: ctx, msg, fields
func (_m *Logger) Debug(ctx context.Context, msg string, fields ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, fields...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: ctx, msg, fields
func (_m *Logger) Error(ctx context.Context, msg string, fields ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, fields...)
	_m.Called(_ca...)
}

// Fatal provides a mock function with given fields: ctx, msg, fields
func (_m *Logger) Fatal(ctx context.Context, msg string, fields ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, fields...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: ctx, msg, fields
func (_m *Logger) Info(ctx context.Context, msg string, fields ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, fields...)
	_m.Called(_ca...)
}

// Warn provides a mock function with given fields: ctx, msg, fields
func (_m *Logger) Warn(ctx context.Context, msg string, fields ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, msg)
	_ca = append(_ca, fields...)
	_m.Called(_ca...)
}

// WithFields provides a mock function with given fields: fields
func (_m *Logger) WithFields(fields map[string]interface{}) logger.Logger {
	ret := _m.Called(fields)

	if len(ret) == 0 {
		panic("no return value specified for WithFields")
	}

	var r0 logger.Logger
	if rf, ok := ret.Get(0).(func(map[string]interface{}) logger.Logger); ok {
		r0 = rf(fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.Logger)
		}
	}

	return r0
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "todo/internal/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// BoardRepository is an autogenerated mock type for the BoardRepository type
type BoardRepository struct {
	mock.Mock
}

// CreateBoard provides a mock function with given fields: ctx, board
func (_m *BoardRepository) CreateBoard(ctx context.Context, board *entity.Board) error {
	ret := _m.Called(ctx, board)

	if len(ret) == 0 {
		panic("no return value specified for CreateBoard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Board) error); ok {
		r0 = rf(ctx, board)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBoard provides a mock function with given fields: ctx, id
func (_m *BoardRepository) DeleteBoard(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBoard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBoardByID provides a mock function with given fields: ctx, id
func (_m *BoardRepository) GetBoardByID(ctx context.Context, id uuid.UUID) (*entity.Board, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBoardByID")
	}

	var r0 *entity.Board
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Board, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Board); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Board)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBoardsByUser provides a mock function with given fields: ctx, userID, limit, offset
func (_m *BoardRepository) GetBoardsByUser(ctx context.Context, userID uuid.UUID, limit int, offset int) ([]entity.Board, error) {
	ret := _m.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetBoardsByUser")
	}

	var r0 []entity.Board
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]entity.Board, error)); ok {
		return rf(ctx, userID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []entity.Board); ok {
		r0 = rf(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Board)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBoard provides a mock function with given fields: ctx, board
func (_m *BoardRepository) UpdateBoard(ctx context.Context, board *entity.Board) error {
	ret := _m.Called(ctx, board)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBoard")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Board) error); ok {
		r0 = rf(ctx, board)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBoardRepository creates a new instance of BoardRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBoardRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BoardRepository {
	mock := &BoardRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "todo/internal/entity"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ColumnRepository is an autogenerated mock type for the ColumnRepository type
type ColumnRepository struct {
	mock.Mock
}

// CreateColumn provides a mock function with given fields: ctx, column
func (_m *ColumnRepository) CreateColumn(ctx context.Context, column *entity.Column) error {
	ret := _m.Called(ctx, column)

	if len(ret) == 0 {
		panic("no return value specified for CreateColumn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Column) error); ok {
		r0 = rf(ctx, column)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteColumn provides a mock function with given fields: ctx, id
func (_m *ColumnRepository) DeleteColumn(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteColumn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetColumnByID provides a mock function with given fields: ctx, id
func (_m *ColumnRepository) GetColumnByID(ctx context.Context, id uuid.UUID) (*entity.Column, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetColumnByID")
	}

	var r0 *entity.Column
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entity.Column, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Column); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Column)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetColumnsByBoard provides a mock function with given fields: ctx, boardID, limit, offset
func (_m *ColumnRepository) GetColumnsByBoard(ctx context.Context, boardID uuid.UUID, limit int, offset int) ([]entity.Column, error) {
	ret := _m.Called(ctx, boardID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetColumnsByBoard")
	}

	var r0 []entity.Column
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]entity.Column, error)); ok {
		return rf(ctx, boardID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []entity.Column); ok {
		r0 = rf(ctx, boardID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Column)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, boardID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateColumn provides a mock function with given fields: ctx, column
func (_m *ColumnRepository) UpdateColumn(ctx context.Context, column *entity.Column) error {
	ret := _m.Called(ctx, column)

	if len(ret) == 0 {
		panic("no return value specified for UpdateColumn")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Column) error); ok {
		r0 = rf(ctx, column)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewColumnRepository creates a new instance of ColumnRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewColumnRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ColumnRepository {
	mock := &ColumnRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
